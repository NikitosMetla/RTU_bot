from aiogram import Bot, types, F
from aiogram import Router
from aiogram.filters import Command, Text, CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import any_state
from aiogram.types import InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder

from data.keyboards import profile_keyboard, start_keyboard, check_in_cleaning, cancel_keyboard, categories_keyboard, \
    buy_or_sell_keyboard, restore_keyboard
from db.user_things import Things
from db.users import Users
from utils.is_auth import is_auth
from utils.paginator import Paginator
from utils.data_of_thing import CreateThing

from data.settings import (InputMessage, develop_ids, comendant_ids,
                           categories, moderators)
import datetime


# router = Router()
# end_router = Router()


# @router.message(CommandStart(), any_state)
# @is_auth
# async def start(message: types.Message, state: FSMContext):
#     await state.clear()
#     await message.delete()
#     user_data = Users(user_id=message.from_user.id)
#     if await user_data.get_auth():
#         return await message.answer('<b>üëã–ü—Ä–∏–≤–µ—Ç, —Ç—ã —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω! –í—ã–±–µ—Ä–∏ —Å–≤–æ–∏ –¥–∞–ª—å–Ω–µ–π—à–∏–µ –¥–µ–π—Å—Ç–≤–∏—è!</b>',
#                                     reply_markup=profile_keyboard)
#
#
# @router.message(Text(text='–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è', ignore_case=True))
# async def auth_user(message: types.Message, state: FSMContext):
#     user_data = Users(user_id=message.from_user.id)
#     if await user_data.get_auth():
#         return message.answer('<b>–í—ã —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ</b>', reply_markup=profile_keyboard)
#     await message.answer('<b>–î–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏, —Å–ª–µ–¥—É–π—Ç–µ –¥–∞–ª—å–Ω–µ–π—à–∏–º –¥–µ–π—Å—Ç–≤–∏—è–º, —á—Ç–æ –ø—Ä–æ—Å–∏—Ç –æ—Ç –≤–∞—Å –±–æ—Ç:\n'
#                          '–ü—Ä–∏—à–ª–∏—Ç–µ email –≤ –≤–∏–¥–µ: login@edu.mirea.ru</b>')
#     await state.set_state(InputMessage.input_email)


# @router.message(Text(text="–ì—Ä–∞—Ñ–∏–∫ —É–±–æ—Ä–∫–∏‚ÑπÔ∏è", ignore_case=True))
# async def help_to_student(message: types.Message, state: FSMContext):
#
#     await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–∏ –¥–∞–ª—å–Ω–µ–π—à–∏–µ –¥–µ–π—Å—Ç–≤–∏—è!", reply_markup=check_in_cleaning.as_markup())
#
#
# @router.callback_query(Text(contains="–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–π –≥—Ä–∞—Ñ–∏–∫üìÖ"), any_state)
# async def answer_to_user(call: types.CallbackQuery, state: FSMContext):
#     await call.message.reply(f"<b>–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä —Å–≤–æ–µ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞:</b>\n"
#                              f"<i>–î–µ–Ω—å –Ω–µ–¥–µ–ª–∏:</i> –ß–µ—Ç–≤–µ—Ä–≥\n<i>–í—Ä–µ–º—è</i>: 14:00-16:00\n"
#                              f"<i>–ú–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è:</i> –û–±—â–µ–∂–∏—Ç–∏–µ ‚Ññ1, 2 —ç—Ç–∞–∂"
#                              f"\n<b><i>–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫,"
#                              f" –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∫–æ–º–µ–Ω–¥–∞–Ω—Ç—É —á–µ—Ä–µ–∑ –±–æ—Ç–∞ –∏–ª–∏ –æ—á–Ω–æ</i></b>",
#                              reply_markup=profile_keyboard)
#
#
# @router.callback_query(Text(contains="–ù–∞—á–∞—Ç—å —É–±–æ—Ä–∫—É‚ñ∂Ô∏è"), any_state)
# async def answer_to_user(call: types.CallbackQuery, state: FSMContext):
#     keyboard = InlineKeyboardBuilder()
#     keyboard.row(InlineKeyboardButton(text="–ó–∞–≤–µ—Ä—à–∏—Ç—å —É–±–æ—Ä–∫—É‚òëÔ∏è", callback_data="end_cleaning"))
#     await call.message.reply(f"–í—ã –Ω–∞—á–∞–ª–∏ —É–±–æ—Ä–∫—É, –∫–æ–º–µ–Ω–¥–∞–Ω—Ç—É –ø—Ä–∏—à–ª–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —ç—Ç–æ–º.\n"
#                              f"–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É, –∫–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ —É–±–∏—Ä–∞—Ç—å—Å—è!",
#                              reply_markup=keyboard.as_markup())
#
#
# @router.callback_query(Text(text="end_cleaning"), any_state)
# async def answer_to_user(call: types.CallbackQuery, state: FSMContext):
#     restore_kb = [
#         [types.KeyboardButton(text="–î–∞"), types.KeyboardButton(text="–ù–µ—Ç")]
#     ]
#     keyboard = types.ReplyKeyboardMarkup(keyboard=restore_kb, resize_keyboard=True)
#     await call.message.reply("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–∫–æ–Ω—á–∏—Ç—å —É–±–æ—Ä–∫—É?", reply_markup=keyboard)
#
#
# @router.message(Text(text="–î–∞"), any_state)
# async def answer_to_user(message: types.Message, state: FSMContext):
#     await message.reply(f"–û—Ç–ª–∏—á–Ω–æ, –∫–æ–º–µ–Ω–¥–∞–Ω—Ç—É –ø—Ä–∏—à–ª–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —É–±–æ—Ä–∫–∏!"
#                         f" –í –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –æ–Ω –ø–æ–¥–æ–π–¥–µ—Ç –Ω–∞ –º–µ—Å—Ç–æ –∏ –ø—Ä–æ–≤–µ–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫—É",
#                         reply_markup=profile_keyboard)
#
#
# @router.message(Text(text="–°–≤—è–∑—å —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏üí¨", ignore_case=True))
# async def help_to_student(message: types.Message, state: FSMContext):
#     await state.set_state(InputMessage.message_to_developer)
#     await message.reply("–ù–∞–ø–∏—à–∏—Ç–µ –∫–∞–∫–æ–π –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å", reply_markup=cancel_keyboard)
#
#
# @router.message(Text(text="–û—Ç–º–µ–Ω–∞‚ùå", ignore_case=True), any_state)
# async def help_to_student(message: types.Message, state: FSMContext):
#     await state.clear()
#     await message.reply("–í—ã–±–µ—Ä–∏ —Å–≤–æ–∏ –¥–∞–ª—å–Ω–µ–π—à–∏–µ –¥–µ–π—Å—Ç–≤–∏—è", reply_markup=profile_keyboard)
#
#
# @router.message(InputMessage.message_to_developer)
# async def listening_of_question(message: types.Message, state: FSMContext, bot: Bot):
#     keyboard_for_develop = InlineKeyboardBuilder()
#     keyboard_for_develop.row(InlineKeyboardButton(text=f"–û—Ç–≤–µ—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é?",
#                                                   callback_data=f"–û—Ç–≤–µ—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {message.from_user.id}"))
#     keyboard_for_develop.row(InlineKeyboardButton(text="–ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å", callback_data="No"))
#     if message.photo is not None:
#         text_message = "<b>–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: </b>" + message.caption + "\n" + \
#                        f"user_id: {message.from_user.id}" + "\n–•–æ—Ç–∏—Ç–µ –æ—Ç–≤–µ—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é?"
#         await bot.send_photo(chat_id=develop_ids[0], photo=message.photo[-1].file_id, caption=text_message,
#                              reply_markup=keyboard_for_develop.as_markup())
#     else:
#         text_message = "<b>–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: </b>" + message.text + "\n" + \
#                        f"user_id: {message.from_user.id}" + "\n–•–æ—Ç–∏—Ç–µ –æ—Ç–≤–µ—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é?"
#         await bot.send_message(chat_id=develop_ids[0], text=text_message, reply_markup=keyboard_for_develop.as_markup())
#     await message.reply("–¢–≤–æ–π –∑–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É!", reply_markup=profile_keyboard)
#     await state.clear()


# @router.message(Text(text="–°–≤—è–∑—å —Å –∫–æ–º–µ–Ω–¥–∞–Ω—Ç–æ–ºüí¨", ignore_case=True))
# async def visit_friend(message: types.Message, state: FSMContext):
#     await message.reply("–û—Ç–ª–∏—á–Ω–æ, –æ—Ç–ø—Ä–∞–≤—å —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –ø—Ä–æ—Å—å–±—É!",
#                         reply_markup=cancel_keyboard)
#     await state.set_state(InputMessage.message_to_comendant)
#
#
# @router.message(InputMessage.message_to_comendant)
# async def visit_friend(message: types.Message, state: FSMContext, bot: Bot):
#     users_api = Users(message.from_user.id)
#     keyboard_for_comendant = InlineKeyboardBuilder()
#     keyboard_for_comendant.row(InlineKeyboardButton(text=f"–û—Ç–≤–µ—Ç–∏—Ç—å —Å—Ç—É–¥–µ–Ω—Ç—É?",
#                                                     callback_data=f"id {message.from_user.id}"))
#     keyboard_for_comendant.row(InlineKeyboardButton(text="–ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å", callback_data="No"))
#     if message.photo is None:
#         await bot.send_message(chat_id=comendant_ids.get(await users_api.get_number_of_obchaga()).get(await users_api.get_floor()),
#                                text=f"–í–∞–º –ø—Ä–∏—à–ª–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {await users_api.get_initials()}"
#                                     f" –∏–∑ –∫–æ–º–Ω–∞—Ç—ã {await users_api.get_room()}:\n{message.text}",
#                                reply_markup=keyboard_for_comendant.as_markup())
#         await message.reply("–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–æ–º–µ–Ω–¥–∞–Ω—Ç—É!", reply_markup=profile_keyboard)
#     else:
#         await bot.send_photo(chat_id=comendant_ids.get(await users_api.get_number_of_obchaga()).get(await users_api.get_floor()),
#                              caption=f"–í–∞–º –ø—Ä–∏—à–ª–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {await users_api.get_initials()}"
#                                      f" –∏–∑ –∫–æ–º–Ω–∞—Ç—ã {await users_api.get_room()}:\n{message.caption}",
#                              photo=message.photo[-1].file_id,
#                              reply_markup=keyboard_for_comendant.as_markup())
#         await message.reply("–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–æ–º–µ–Ω–¥–∞–Ω—Ç—É!", reply_markup=profile_keyboard)


# @router.callback_query(Text(contains="–û—Ç–º–µ–Ω–∞‚ùå|"), any_state)
# async def answer_to_user(call: types.CallbackQuery, state: FSMContext):
#     await call.message.delete()
#     await state.clear()
#     data = call.data.split("|")[1:]
#     thing = Things(category=data[0], user_id=data[1], thing_id=data[2])
#     await thing.delete_thing()
#     await call.message.answer("–í—ã–±–µ—Ä–∏ —Å–≤–æ–∏ –¥–∞–ª—å–Ω–µ–π—à–∏–µ –¥–µ–π—Å—Ç–≤–∏—è", reply_markup=profile_keyboard)


# @router.message(Text(text="–ë–∞—Ä–∞—Ö–æ–ª–∫–∞üíµ", ignore_case=True), any_state)
# async def visit_friend(message: types.Message, state: FSMContext):
#     await message.reply("–û—Ç–ª–∏—á–Ω–æ, –≤—ã–±–µ—Ä–∏ —Å–≤–æ–∏ –¥–∞–ª—å–Ω–µ–π—à–∏–µ –¥–µ–π—Å—Ç–≤–∏—è!",
#                         reply_markup=buy_or_sell_keyboard)
#     # await state.set_state(InputMessage.choice_category)
#
#
# @router.message(Text(text="–ü—Ä–æ–¥–∞—Ç—åüí∞", ignore_case=True))
# async def visit_friend(message: types.Message, state: FSMContext):
#     await state.set_state(InputMessage.enter_category)
#     await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å–≤–æ–µ–≥–æ —Ç–æ–≤–∞—Ä–∞!", reply_markup=categories_keyboard.as_markup())
#
#
# @router.callback_query(lambda call: call.data in categories and call.data != "–û—Ç–º–µ–Ω–∞‚ùå", InputMessage.enter_category)
# async def answer_to_user(call: types.CallbackQuery, state: FSMContext):
#     thing = Things(category=call.data)
#     await thing.add_thing(user_id=call.from_user.id)
#     # print(call.from_user.id)
#     thing_id = thing.thing_id
#     print(call.data, call.from_user.id, thing_id)
#     keyboard = CreateThing(category=call.data, user_id=call.from_user.id, thing_id=thing_id)
#     keyboard = await keyboard.data_thing_keyboard()
#     keyboard.row(InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞‚ùå", callback_data=f"–û—Ç–º–µ–Ω–∞‚ùå|{thing.category}|"
#                                                                     f"{thing.user_id}|{thing.thing_id}"))
#     await call.message.edit_text(f"–¢–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ:\n"
#                                  f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {thing.category}\n"
#                                  f"–ù–∞–∑–≤–∞–Ω–∏–µ –≤–µ—â–∏: {await thing.get_name()}\n"
#                                  f"–¶–µ–Ω–∞: {await thing.get_price()}\n"
#                                  f"–°–æ—Å—Ç–æ—è–Ω–∏–µ: {await thing.get_state_thing()}\n"
#                                  f"–û–ø–∏—Å–∞–Ω–∏–µ: {await thing.get_description()}\n"
#                                  f"–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏:", reply_markup=keyboard.as_markup())
#     await state.clear()
#
#
# @router.callback_query(Text(contains="name"), any_state)
# async def enter_name(call: types.CallbackQuery, state: FSMContext):
#     data = call.data.split("|")
#     data = "|".join(data[1:])
#     await state.set_state(InputMessage.enter_name)
#     await state.update_data(thing=data)
#     await call.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–µ—â–∏")
#
#
# @router.message(F.text, InputMessage.enter_name)
# async def enter_name(message: types.Message, state: FSMContext):
#     data = await state.get_data()
#     await state.clear()
#     data = data.get("thing").split("|")
#     category = data[0]
#     user_id = data[1]
#     thing_id = data[2]
#     thing = Things(category=category, user_id=user_id, thing_id=thing_id)
#     keyboard = CreateThing(category=category, user_id=message.from_user.id, thing_id=thing_id)
#     keyboard = await keyboard.data_thing_keyboard()
#     keyboard.row(InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞‚ùå", callback_data=f"–û—Ç–º–µ–Ω–∞‚ùå|{thing.category}|"
#                                                                    f"{thing.user_id}|{thing.thing_id}"))
#     await thing.edit_name(message.text)
#     await message.reply(text=f"–¢–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ:\n"
#                              f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}\n"
#                              f"–ù–∞–∑–≤–∞–Ω–∏–µ –≤–µ—â–∏: {await thing.get_name()}\n"
#                              f"–¶–µ–Ω–∞: {await thing.get_price()}\n"
#                              f"–°–æ—Å—Ç–æ—è–Ω–∏–µ: {await thing.get_state_thing()}\n"
#                              f"–û–ø–∏—Å–∞–Ω–∏–µ: {await thing.get_description()}\n"
#                              f"–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏:", reply_markup=keyboard.as_markup())
#
#
# @router.callback_query(Text(contains="price"), any_state)
# async def enter_name(call: types.CallbackQuery, state: FSMContext):
#     data = call.data.split("|")
#     data = "|".join(data[1:])
#     await state.set_state(InputMessage.enter_price)
#     await state.update_data(thing=data)
#     await call.message.edit_text("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞")
#
#
# @router.message(F.text, InputMessage.enter_price)
# async def enter_name(message: types.Message, state: FSMContext):
#     data = await state.get_data()
#     await state.clear()
#     data = data.get("thing").split("|")
#     category = data[0]
#     user_id = data[1]
#     thing_id = data[2]
#     thing = Things(category=category, user_id=user_id, thing_id=thing_id)
#     keyboard = CreateThing(category=category, user_id=message.from_user.id, thing_id=thing_id)
#     keyboard = await keyboard.data_thing_keyboard()
#     keyboard.row(InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞‚ùå", callback_data=f"–û—Ç–º–µ–Ω–∞‚ùå|{thing.category}|"
#                                                                    f"{thing.user_id}|{thing.thing_id}"))
#     await thing.edit_price(message.text)
#     await message.reply(text=f"–¢–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ:\n"
#                              f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}\n"
#                              f"–ù–∞–∑–≤–∞–Ω–∏–µ –≤–µ—â–∏: {await thing.get_name()}\n"
#                              f"–¶–µ–Ω–∞: {await thing.get_price()}\n"
#                              f"–°–æ—Å—Ç–æ—è–Ω–∏–µ: {await thing.get_state_thing()}\n"
#                              f"–û–ø–∏—Å–∞–Ω–∏–µ: {await thing.get_description()}\n"
#                              f"–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏:", reply_markup=keyboard.as_markup())
#
#
# @router.callback_query(Text(contains="state"), any_state)
# async def enter_name(call: types.CallbackQuery, state: FSMContext):
#     data = call.data.split("|")
#     data = "|".join(data[1:])
#     await state.set_state(InputMessage.enter_state)
#     await state.update_data(thing=data)
#     await call.message.edit_text("–í–≤–µ–¥–∏—Ç–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–µ—â–∏")
#
#
# @router.message(F.text, InputMessage.enter_state)
# async def enter_name(message: types.Message, state: FSMContext):
#     data = await state.get_data()
#     await state.clear()
#     data = data.get("thing").split("|")
#     category = data[0]
#     user_id = data[1]
#     thing_id = data[2]
#     thing = Things(category=category, user_id=user_id, thing_id=thing_id)
#     keyboard = CreateThing(category=category, user_id=message.from_user.id, thing_id=thing_id)
#     keyboard = await keyboard.data_thing_keyboard()
#     keyboard.row(InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞‚ùå", callback_data=f"–û—Ç–º–µ–Ω–∞‚ùå|{thing.category}|"
#                                                                    f"{thing.user_id}|{thing.thing_id}"))
#     await thing.edit_state_thing(message.text)
#     await message.reply(text=f"–¢–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ:\n"
#                              f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}\n"
#                              f"–ù–∞–∑–≤–∞–Ω–∏–µ –≤–µ—â–∏: {await thing.get_name()}\n"
#                              f"–¶–µ–Ω–∞: {await thing.get_price()}\n"
#                              f"–°–æ—Å—Ç–æ—è–Ω–∏–µ: {await thing.get_state_thing()}\n"
#                              f"–û–ø–∏—Å–∞–Ω–∏–µ: {await thing.get_description()}\n"
#                              f"–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏:", reply_markup=keyboard.as_markup())
#
#
# @router.callback_query(Text(contains="description"), any_state)
# async def enter_name(call: types.CallbackQuery, state: FSMContext):
#     data = call.data.split("|")
#     data = "|".join(data[1:])
#     await state.set_state(InputMessage.enter_description)
#     await state.update_data(thing=data)
#     await call.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–µ—â–∏")
#
#
# @router.message(F.text, InputMessage.enter_description)
# async def enter_name(message: types.Message, state: FSMContext):
#     data = await state.get_data()
#     await state.clear()
#     data = data.get("thing").split("|")
#     category = data[0]
#     user_id = data[1]
#     thing_id = data[2]
#     thing = Things(category=category, user_id=user_id, thing_id=thing_id)
#     keyboard = CreateThing(category=category, user_id=message.from_user.id, thing_id=thing_id)
#     keyboard = await keyboard.data_thing_keyboard()
#     keyboard.row(InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞‚ùå", callback_data=f"–û—Ç–º–µ–Ω–∞‚ùå|{thing.category}|"
#                                                                    f"{thing.user_id}|{thing.thing_id}"))
#     await thing.edit_description(message.text)
#     await message.reply(text=f"–¢–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ:\n"
#                              f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}\n"
#                              f"–ù–∞–∑–≤–∞–Ω–∏–µ –≤–µ—â–∏: {await thing.get_name()}\n"
#                              f"–¶–µ–Ω–∞: {await thing.get_price()}\n"
#                              f"–°–æ—Å—Ç–æ—è–Ω–∏–µ: {await thing.get_state_thing()}\n"
#                              f"–û–ø–∏—Å–∞–Ω–∏–µ: {await thing.get_description()}\n"
#                              f"–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏:", reply_markup=keyboard.as_markup())


# @router.message(Text(text="–ú–æ–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—èüü¢"), any_state)
# async def answer_to_user(message: types.Message, state: FSMContext):
#     keyboard = await Paginator().generate_my_things_keyboard(message.from_user.id)
#     await message.answer("–ú–æ–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∏–∑ –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π:", reply_markup=keyboard.as_markup())
#
#
# @router.callback_query(Text(contains="my_thing|"), any_state)
# async def getting_thing(call: types.CallbackQuery, state: FSMContext):
#     data = call.data.split("|")
#     user_id = data[2]
#     thing_id = data[1]
#     category = data[3]
#     thing = Things(category=category, user_id=user_id, thing_id=thing_id)
#     keyboard = await CreateThing(category=category, user_id=user_id, thing_id=thing_id).edit_thing_keyboard()
#     if not (await thing.get_verified()):
#         keyboard.row(InlineKeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é", callback_data=f"–û—Ç–ø—Ä–∞–≤–∏—Ç—å|{category}|"
#                                                                                        f"{user_id}|{thing_id}"))
#     await call.message.edit_text(f"–ù–∞–∑–≤–∞–Ω–∏–µ: {await thing.get_name()}\n"
#                                  f"–°–æ—Å—Ç–æ—è–Ω–∏–µ: {await thing.get_state_thing()}\n"
#                                  f"–¶–µ–Ω–∞: {await thing.get_price()}\n"
#                                  f"–û–ø–∏—Å–∞–Ω–∏–µ: {await thing.get_description()}",
#                                  reply_markup=keyboard.as_markup())
#
#
# @router.callback_query(Text(text="back_to_things"), any_state)
# async def next_page(call: types.CallbackQuery, state: FSMContext):
#     keyboard = await Paginator().generate_my_things_keyboard(call.from_user.id)
#     await call.message.edit_text("–ú–æ–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∏–∑ –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π:", reply_markup=keyboard.as_markup())
#
#
# @router.callback_query(Text(startswith="my_things"), any_state)
# async def next_page(call: types.CallbackQuery, state: FSMContext):
#     data = call.data.split("|")
#     number_page = int(data[2])
#     next_or_back = data[1]
#     if next_or_back == "page_next":
#         number_page += 1
#     else:
#         if number_page != 0:
#             number_page -= 1
#     keyboard = await Paginator().generate_my_things_keyboard(user_id=call.from_user.id, page=number_page)
#     await call.message.edit_text("–ú–æ–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∏–∑ –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π:", reply_markup=keyboard.as_markup())
#
#
# @router.callback_query(Text(contains="edit_thing"), any_state)
# async def answer_to_user(call: types.CallbackQuery, state: FSMContext):
#     data = call.data.split("|")[1:]
#     category, user_id, thing_id = data[0], data[1], data[2]
#     keyboard = CreateThing(category=category, user_id=user_id, thing_id=thing_id)
#     keyboard = await keyboard.data_thing_keyboard()
#     thing = Things(category=category, user_id=user_id, thing_id=thing_id)
#     keyboard.row(InlineKeyboardButton(text="üîô–ù–∞–∑–∞–¥ –∫ –º–æ–∏–º –æ–±—ä—è–≤–ª–µ–Ω–∏—è–º", callback_data="back_to_things"))
#     await thing.edit_verified(False)
#     await call.message.edit_text(f"–¢–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ:\n"
#                                  f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}\n"
#                                  f"–ù–∞–∑–≤–∞–Ω–∏–µ –≤–µ—â–∏: {await thing.get_name()}\n"
#                                  f"–¶–µ–Ω–∞: {await thing.get_price()}\n"
#                                  f"–°–æ—Å—Ç–æ—è–Ω–∏–µ: {await thing.get_state_thing()}\n"
#                                  f"–û–ø–∏—Å–∞–Ω–∏–µ: {await thing.get_description()}\n"
#                                  f"–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏:",
#                                  reply_markup=keyboard.as_markup())
#
#
# @router.callback_query(Text(contains="delete_thing|"), any_state)
# async def enter_name(call: types.CallbackQuery, state: FSMContext):
#     data = call.data.split("|")[1:]
#     confirm_action = InlineKeyboardBuilder()
#     confirm_action.row(InlineKeyboardButton(text=f"–î–∞", callback_data=f"DELETE|{'|'.join(data)}"))
#     confirm_action.row(InlineKeyboardButton(text=f"–ù–µ—Ç", callback_data=f"NOT_DELETE|{'|'.join(data)}"))
#     await call.message.edit_text("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ?", reply_markup=confirm_action.as_markup())
#
#
# @router.callback_query(Text(startswith="DELETE|"), any_state)
# async def enter_name(call: types.CallbackQuery, state: FSMContext):
#     data = call.data.split("|")[1:]
#     thing = await Things(category=data[0], user_id=data[1], thing_id=data[2]).delete_thing()
#     await call.message.edit_text("–í–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ!")
#     keyboard = await Paginator().generate_my_things_keyboard(call.from_user.id)
#     await call.message.answer("–í—ã—à–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è:", reply_markup=keyboard.as_markup())
#
#
# @router.callback_query(Text(contains="NOT_DELETE|"), any_state)
# async def enter_name(call: types.CallbackQuery, state: FSMContext):
#     keyboard = await Paginator().generate_my_things_keyboard(call.from_user.id)
#     await call.message.edit_text("–í–∞—à–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è:", reply_markup=keyboard.as_markup())
#
#
# @router.callback_query(Text(contains="–û—Ç–ø—Ä–∞–≤–∏—Ç—å|"), any_state)
# async def enter_name(call: types.CallbackQuery, state: FSMContext):
#     data = call.data.split("|")[1:]
#     thing = Things(category=data[0], user_id=data[1], thing_id=data[2])
#     confirm_action = InlineKeyboardBuilder()
#     confirm_action.row(InlineKeyboardButton(text=f"–î–∞", callback_data=f"MODER|{'|'.join(data)}"))
#     confirm_action.row(InlineKeyboardButton(text=f"–ù–µ—Ç", callback_data=f"NOT_MODER|{'|'.join(data)}"))
#     await call.message.edit_text("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–ª–æ–∂–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ?", reply_markup=confirm_action.as_markup())
#
#
# @router.callback_query(Text(startswith="MODER|"), any_state)
# async def enter_name(call: types.CallbackQuery, state: FSMContext, bot: Bot):
#     data = call.data.split("|")[1:]
#     thing = Things(category=data[0], user_id=data[1], thing_id=data[2])
#     keyboard = InlineKeyboardBuilder()
#     keyboard.row(InlineKeyboardButton(text=f"–û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"APPROVE|{'|'.join(data)}"))
#     keyboard.row(InlineKeyboardButton(text=f"–û—Ç–º–µ–Ω–∏—Ç—å –æ–¥–æ–±—Ä–µ–Ω–∏–µ", callback_data=f"NOT_APPROVE|{'|'.join(data)}"))
#     await bot.send_message(moderators[0], f"–í–∞–º –ø—Ä–∏—à–ª–æ –Ω–æ–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ!\n–ù–∞–∑–≤–∞–Ω–∏–µ: {await thing.get_name()}\n"
#                                                f"–°–æ—Å—Ç–æ—è–Ω–∏–µ: {await thing.get_state_thing()}\n"
#                                                f"–¶–µ–Ω–∞: {await thing.get_price()}\n"
#                                                f"–û–ø–∏—Å–∞–Ω–∏–µ: {await thing.get_description()}",
#                            reply_markup=keyboard.as_markup())
#     await call.message.delete()
#     await call.message.answer("–í–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é!", reply_markup=profile_keyboard)
#
#
# @router.callback_query(Text(startswith="APPROVE|"), any_state)
# async def enter_name(call: types.CallbackQuery, state: FSMContext, bot: Bot):
#     data = call.data.split("|")[1:]
#     thing = Things(category=data[0], user_id=data[1], thing_id=data[2])
#     await thing.edit_verified(True)
#     await call.message.edit_text("–û—Ç–ª–∏—á–Ω–æ, –≤—ã –æ–¥–æ–±—Ä–∏–ª–∏ –∑–∞—è–≤–∫—É!")
#     await bot.send_message(chat_id=thing.user_id, text=f"–í–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ <b>{await thing.get_name()}</b>"
#                                                        f" –æ–¥–æ–±—Ä–µ–Ω–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º –∏ –¥–æ—Å—Ç—É–ø–Ω–æ –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É!")
#
#
# @router.callback_query(Text(contains="NOT_MODER|"), any_state)
# async def enter_name(call: types.CallbackQuery, state: FSMContext):
#     keyboard = await Paginator().generate_my_things_keyboard(call.from_user.id)
#     await call.message.edit_text("–í—ã—à–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è:", reply_markup=keyboard.as_markup())
#
#
# @router.callback_query(Text(startswith="NOT_APPROVE|"), any_state)
# async def enter_name(call: types.CallbackQuery, state: FSMContext):
#     await state.set_state(InputMessage.comment_to_thing)
#     data = call.data.split("|")[1:]
#     await state.update_data(data="|".join(data))
#     thing = Things(category=data[0], user_id=data[1], thing_id=data[2])
#     await thing.edit_verified(False)
#     await call.message.edit_text("–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π, –ø–æ—á–µ–º—É –≤—ã –Ω–µ –æ–¥–æ–±—Ä–∏–ª–∏ –∑–∞—è–≤–∫—É!")
#
#
# @router.message(F.text, InputMessage.comment_to_thing)
# async def answer_to_user(message: types.Message, state: FSMContext, bot: Bot):
#     data = await state.get_data()
#     data = data.get("data").split("|")
#     user_id = data[1]
#     thing = Things(category=data[0], user_id=data[1], thing_id=data[2])
#     text = f"–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—é –≤–µ—â–∏ {await thing.get_name()} –Ω–µ –æ–¥–æ–±—Ä–µ–Ω–∞.–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞:\n{message.text}"
#     await bot.send_message(chat_id=user_id, text=text)
#     await state.clear()

#
# @router.callback_query(Text(contains="get_categories"), any_state)
# @router.message(Text(text="–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏—è‚Ñπüìã", ignore_case=True), any_state)
# async def visit_friend(message: types.Message or types.CallbackQuery, state: FSMContext):
#     if type(message) == types.Message:
#         gayboard = categories_keyboard
#         # categories_keyboard.row(InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞‚ùå", callback_data="–û—Ç–º–µ–Ω–∞‚ùå"))
#         await message.answer("–û—Ç–ª–∏—á–Ω–æ, –≤—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞!", reply_markup=gayboard.as_markup())
#         return
#     await message.message.edit_text("–û—Ç–ª–∏—á–Ω–æ, –≤—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞!",
#                                     reply_markup=categories_keyboard.as_markup())
#     # await state.set_state(InputMessage.choice_category)
#
#
# @router.callback_query(Text(text="–û—Ç–º–µ–Ω–∞‚ùå"), any_state)
# async def answer_to_user(call: types.CallbackQuery, state: FSMContext):
#     await call.message.delete()
#     await state.clear()
#     await call.message.answer("–í—ã–±–µ—Ä–∏ —Å–≤–æ–∏ –¥–∞–ª—å–Ω–µ–π—à–∏–µ –¥–µ–π—Å—Ç–≤–∏—è", reply_markup=profile_keyboard)
#
#
# @router.callback_query(lambda call: call.data in categories and call.data != "–û—Ç–º–µ–Ω–∞‚ùå", any_state)
# async def answer_to_user(call: types.CallbackQuery, state: FSMContext):
#     things = Paginator(Things(call.data).user_things.get(call.data), call.data)
#     keyboard = await things.generate_things_list_keyboard()
#     await call.message.edit_text(f"–û–±—ä—è–≤–ª–µ–Ω–∏—è –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {call.data}:")
#     await call.message.edit_reply_markup(reply_markup=keyboard.as_markup())
#
#
# @router.callback_query(Text(contains="get_thing"), any_state)
# async def getting_thing(call: types.CallbackQuery, state: FSMContext):
#     data = call.data.split("|")
#     user_id = data[2]
#     thing_id = data[1]
#     category = data[3]
#     thing = Things(category=category, user_id=user_id, thing_id=thing_id)
#     back_to_categories = InlineKeyboardBuilder()
#     back_to_categories.row(InlineKeyboardButton(text="–°–≤—è–∑–∞—Ç—å—Å—è —Å –ø—Ä–æ–¥–∞–≤—Ü–æ–º", callback_data="communicate_salesman|"
#                                                                                             + "|".join(data[1:])))
#     back_to_categories.row(InlineKeyboardButton(text="üîô–ù–∞–∑–∞–¥ –∫ –æ–±—ä—è–≤–ª–µ–Ω–∏—è–º", callback_data=category))
#     await call.message.edit_text(f"–ù–∞–∑–≤–∞–Ω–∏–µ: {await thing.get_name()}\n"
#                                  f"–°–æ—Å—Ç–æ—è–Ω–∏–µ: {await thing.get_state_thing()}\n"
#                                  f"–¶–µ–Ω–∞: {await thing.get_price()}\n"
#                                  f"–û–ø–∏—Å–∞–Ω–∏–µ: {await thing.get_description()}",
#                                  reply_markup=back_to_categories.as_markup())
#
#
# @router.callback_query(Text(startswith="communicate_salesman"), any_state)
# async def answer_to_user(call: types.CallbackQuery, state: FSMContext):
#     data = call.data.split("|")
#     user_id = data[2]
#     thing_id = data[1]
#     category = data[3]
#     thing = Things(category=category, user_id=user_id, thing_id=thing_id)
#     back_to_categories = InlineKeyboardBuilder()
#     back_to_categories.row(InlineKeyboardButton(text="üîô–ù–∞–∑–∞–¥ –∫ –æ–±—ä—è–≤–ª–µ–Ω–∏—è–º", callback_data=category))
#     await call.message.edit_text(f"–ù–∞–∑–≤–∞–Ω–∏–µ: {await thing.get_name()}\n"
#                                  f"–°–æ—Å—Ç–æ—è–Ω–∏–µ: {await thing.get_state_thing()}\n"
#                                  f"–¶–µ–Ω–∞: {await thing.get_price()}\n"
#                                  f"–û–ø–∏—Å–∞–Ω–∏–µ: {await thing.get_description()}\n"
#                                  f"–°—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–æ–¥–∞–≤—Ü–∞ {call.from_user.url}",
#                                  reply_markup=back_to_categories.as_markup())
#
#
# @router.callback_query(Text(startswith="things_list"), any_state)
# async def next_page(call: types.CallbackQuery, state: FSMContext):
#     data = call.data.split("|")
#     number_page = int(data[2])
#     next_or_back = data[1]
#     category = data[3]
#     if next_or_back == "page_next":
#         number_page += 1
#     else:
#         if number_page != 0:
#             number_page -= 1
#     keyboard = Paginator(Things(category).user_things.get(category), category)
#     keyboard = await keyboard.generate_things_list_keyboard(number_page)
#     await call.message.edit_text(f"–û–±—ä—è–≤–ª–µ–Ω–∏—è –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category}:")
#     await call.message.edit_reply_markup(reply_markup=keyboard.as_markup())


# @router.message(Text(text="–ü–æ–∑–≤–∞—Ç—å –¥—Ä—É–≥–∞üî∂", ignore_case=True))
# async def visit_friend(message: types.Message, state: FSMContext):
#     await message.reply("–û—Ç–ª–∏—á–Ω–æ, –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ –§–ò–û —Å–≤–æ–µ–≥–æ –≥–æ—Å—Ç—è, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Å–∫–æ–ª—å–∫–æ, —É–∫–∞–∂–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é",
#                         reply_markup=cancel_keyboard)
#     await state.set_state(InputMessage.calling_guests)
#
#
# @router.message(F.text, InputMessage.calling_guests)
# async def visit_friend(message: types.Message, state: FSMContext):
#     await state.set_state(InputMessage.time_guests)
#     await state.update_data(initiels=message.text)
#     await message.reply(f"–û—Ç–ª–∏—á–Ω–æ, –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ –ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –∫ –∫–æ—Ç–æ—Ä–æ–º—É –æ–Ω(–∏) –ø–æ–¥–æ–π–¥—É—Ç (—Å 9 –¥–æ 20 —á–∞—Å–æ–≤) "
#                         f"–≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:MM, –Ω–∞–ø—Ä–∏–º–µ—Ä, <b>15:20</b>",
#                         reply_markup=cancel_keyboard)
#
#
# @router.message(F.text, InputMessage.time_guests)
# async def visit_friend(message: types.Message, state: FSMContext):
#     # print(await state.get_data())
#     try:
#         time_visit = datetime.time(int(message.text[:2]), int(message.text[3:]))
#         # print(str(time_visit), type(time_visit))
#         if datetime.time(9, 0) < time_visit < datetime.time(20, 0):
#             data = await state.get_data()
#             data["time"] = time_visit
#             # await state.update_data(data)
#             await message.reply("–û—Ç–ª–∏—á–Ω–æ, –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å–≤–æ–π –ª–∏—á–Ω—ã–π –∫–æ–¥!", reply_markup=restore_keyboard)
#             await state.set_state(InputMessage.code_confirm)
#             await state.update_data(data)
#         else:
#             await message.reply("–í —ç—Ç–æ –≤—Ä–µ–º—è –Ω–µ–ª—å–∑—è –ø—Ä–∏–≤–æ–¥–∏—Ç—å –≥–æ—Å—Ç–µ–π, –ø–æ–ø—Ä–æ–±—É–π —É—â–µ —Ä–∞–∑!",
#                                 reply_markup=cancel_keyboard)
#     except:
#         await message.reply("–¢—ã –≤–≤–µ–ª –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑!",
#                             reply_markup=cancel_keyboard)
#
#
# @router.message(Text(text="–ó–∞–±—ã–ª –∫–æ–¥", ignore_case=True), InputMessage.code_confirm)
# async def visit_friend(message: types.Message, state: FSMContext):
#     await message.reply("–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–∞–ø–∏—à–∏ —Å–≤–æ–π email –æ—Ç –õ–ö–° –≤ –≤–∏–¥–µ login@edu.mirea.ru",
#                         reply_markup=cancel_keyboard)
#     data = await state.get_data()
#     await state.set_state(InputMessage.enter_email)
#     await state.update_data(data)
#
#
# @router.message(F.text, InputMessage.enter_email)
# async def visit_friend(message: types.Message, state: FSMContext):
#     if message.text == await Users(str(message.from_user.id)).get_email():
#         await message.reply("–û—Ç–ª–∏—á–Ω–æ, –Ω–∞–ø–∏—à–∏ —Å–≤–æ–π –ø–æ—Ä–æ–ª—å –æ—Ç –õ–ö–°",
#                             reply_markup=cancel_keyboard)
#         data = await state.get_data()
#         await state.set_state(InputMessage.enter_password)
#         await state.update_data(data)
#     else:
#         await message.reply("–¢—ã –≤–≤–µ–ª –Ω–µ–≤–µ—Ä–Ω—ã–π email, –ø–æ–ø—Ä–æ–±—É–π –ø–æ–≤—Ç–æ—Ä–∏—Ç—å!", reply_markup=cancel_keyboard)
#
#
# @router.message(F.text, InputMessage.enter_password)
# async def visit_friend(message: types.Message, state: FSMContext):
#     if message.text == await Users(str(message.from_user.id)).get_password():
#         await message.reply("–û—Ç–ª–∏—á–Ω–æ, –Ω–∞–ø–∏—à–∏ —Å–≤–æ–π –Ω–æ–≤—ã–π –ø–∏–Ω-–∫–æ–¥ –ª—é–±–æ–π –¥–ª–∏–Ω—ã (–Ω–µ –º–µ–Ω–µ–µ 4 —Ü–∏—Ñ—Ä)!",
#                             reply_markup=cancel_keyboard)
#         data = await state.get_data()
#         await state.set_state(InputMessage.enter_code)
#         await state.update_data(data)
#     else:
#         await message.reply("–¢—ã –≤–≤–µ–ª –Ω–µ–≤–µ—Ä–Ω—ã–π –ø–æ—Ä–æ–ª—å, –ø–æ–ø—Ä–æ–±—É–π –ø–æ–≤—Ç–æ—Ä–∏—Ç—å!", reply_markup=cancel_keyboard)
#
#
# @router.message(F.text, InputMessage.enter_code)
# async def visit_friend(message: types.Message, state: FSMContext):
#     if message.text.isdigit():
#         await Users(str(message.from_user.id)).add_secret_code(int(message.text))
#         await message.answer("–û—Ç–ª–∏—á–Ω–æ —Ç–≤–æ–π –∫–æ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω! –í–≤–µ–¥–∏ –µ–≥–æ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞—è–≤–∫–∏",
#                             reply_markup=cancel_keyboard)
#         data = await state.get_data()
#         await state.set_state(InputMessage.code_confirm)
#         await state.update_data(data)
#         await message.delete()
#     else:
#         await message.reply("–¢–≤–æ–π –∫–æ–¥ –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å —Ç–æ–ª—å–∫–æ –∏–∑ —Ü–∏—Ñ—Ä, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑!",
#                             reply_markup=cancel_keyboard)
#
#
# @router.message(F.text, InputMessage.code_confirm)
# async def visit_friend(message: types.Message, state: FSMContext, bot: Bot):
#     if message.text == str(await Users(str(message.from_user.id)).get_code()):
#         await message.delete()
#         data = await state.get_data()
#         users_api = Users(str(message.from_user.id))
#         await bot.send_message(chat_id=security_ids[0],
#                                text=f"–í–∞–º –ø—Ä–∏—à–ª–æ –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ! {await users_api.get_initials()}"
#                                     f" –ø—Ä–∏–≥–ª–∞—Å–∏–ª {data.get('initiels')}"
#                                     f" –∫ —Å–µ–±–µ –≤ –≥–æ—Å—Ç–∏! –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è –ø—Ä–∏–±—ã—Ç–∏—è: {str(data.get('time'))[:-3]}")
#         await message.answer(f"–û—Ç–ª–∏—á–Ω–æ, –≤–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞! "
#                              f"–í—ã –ø—Ä–∏–≥–ª–∞—Å–∏–ª–∏ {data.get('initiels')} –∫ —Å–µ–±–µ –≤ –≥–æ—Å—Ç–∏!"
#                              f" –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è –ø—Ä–∏–±—ã—Ç–∏—è: {str(data.get('time'))[:-3]}", reply_markup=profile_keyboard)
#         await state.clear()
#     else:
#         await message.reply("–¢—ã –≤–≤–µ–ª –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∫–æ–¥, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑!",
#                             reply_markup=cancel_keyboard)
#
#
# @router.callback_query(Text(text="–û—Ç–º–µ–Ω–∞‚ùå"), any_state)
# async def answer_to_user(call: types.CallbackQuery, state: FSMContext):
#     await call.message.delete()
#     await state.clear()
#     await call.message.answer("–í—ã–±–µ—Ä–∏ —Å–≤–æ–∏ –¥–∞–ª—å–Ω–µ–π—à–∏–µ –¥–µ–π—Å—Ç–≤–∏—è", reply_markup=profile_keyboard)
#
#
# @end_router.message(any_state)
# async def starting(message: types.Message):
#     await message.answer('üëã–Ø –≤–∞—Å –Ω–µ –ø–æ–Ω–∏–º–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–∏ –¥–∞–ª—å–Ω–µ–π—à–∏–µ –¥–µ–π—Å—Ç–≤–∏—è!',
#                          reply_markup=start_keyboard)
