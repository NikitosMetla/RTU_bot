import asyncio
import time

from aiogram import Bot, types, F, Router
from aiogram.filters import Text
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import any_state
from aiogram.types import InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder

from data.keyboards import profile_keyboard, start_keyboard, cancel_keyboard, restore_keyboard
from db.all_dormitories import Dormitory
from db.guests_applications import Guests

from db.users import Users

from data.settings import InputMessage
import datetime


call_friends_router = Router()
end_router = Router()


@call_friends_router.message(Text(text="–ü–æ–∑–≤–∞—Ç—å –¥—Ä—É–≥–∞üî∂", ignore_case=True))
async def visit_friend(message: types.Message, state: FSMContext, bot: Bot):
    message_for_edit = await message.answer("–û—Ç–ª–∏—á–Ω–æ, –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ –§–ò–û —Å–≤–æ–µ–≥–æ –≥–æ—Å—Ç—è, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Å–∫–æ–ª—å–∫–æ, —É–∫–∞–∂–∏ —á–µ—Ä–µ–∑"
                                            " –∑–∞–ø—è—Ç—É—é", reply_markup=cancel_keyboard.as_markup())
    message_id = message_for_edit.message_id
    await state.set_state(InputMessage.calling_guests)
    await state.update_data(message_id=message_id)


@call_friends_router.message(F.text, InputMessage.calling_guests)
async def name_guests(message: types.Message, state: FSMContext, bot: Bot):
    message_id = await state.get_data()
    message_id = message_id.get("message_id")
    await state.set_state(InputMessage.time_guests)
    await state.update_data(initiels=message.text, message_id=message_id)
    guest_initials = message.text
    await bot.edit_message_text(chat_id=message.from_user.id, message_id=message_id,
                                text=f"–û—Ç–ª–∏—á–Ω–æ, –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ –ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –∫ –∫–æ—Ç–æ—Ä–æ–º—É {guest_initials}"
                                     f" –ø–æ–¥–æ–π–¥—ë—Ç(—É—Ç)"
                                     f" (—Å 9 –¥–æ 20 —á–∞—Å–æ–≤) "
                                     f"–≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:MM, –Ω–∞–ø—Ä–∏–º–µ—Ä, <b>15:20</b>", reply_markup=cancel_keyboard.as_markup())
    await message.delete()


@call_friends_router.message(F.text, InputMessage.time_guests)
async def time_visiting(message: types.Message, state: FSMContext, bot: Bot):
    try:
        data = await state.get_data()
        message_id = data.get("message_id")
        time_visit = datetime.time(int(message.text[:2]), int(message.text[3:]))
        # print(str(time_visit), type(time_visit))
        if datetime.time(9, 0) < time_visit < datetime.time(20, 0):
            data["time"] = time_visit
            # await state.update_data(data)
            await message.delete()
            await bot.edit_message_text(chat_id=message.from_user.id, message_id=message_id,
                                        text="–û—Ç–ª–∏—á–Ω–æ, –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å–≤–æ–π –ª–∏—á–Ω—ã–π –∫–æ–¥!",
                                        reply_markup=restore_keyboard.as_markup())
            await state.set_state(InputMessage.code_confirm)
            await state.update_data(data)
        else:
            await bot.edit_message_text(chat_id=message.from_user.id, message_id=message_id,
                                        text="–í —ç—Ç–æ –≤—Ä–µ–º—è –Ω–µ–ª—å–∑—è –ø—Ä–∏–≤–æ–¥–∏—Ç—å –≥–æ—Å—Ç–µ–π, –ø–æ–ø—Ä–æ–±—É–π —É—â–µ —Ä–∞–∑!",
                                        reply_markup=restore_keyboard.as_markup())
    except:
        await message.delete()
        await message.edit_text("–¢—ã –≤–≤–µ–ª –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑!",
                                reply_markup=cancel_keyboard)


@call_friends_router.callback_query(Text(text="forget_code", ignore_case=True), InputMessage.code_confirm)
async def forget_code(message: types.CallbackQuery, state: FSMContext, bot: Bot):
    user_code = await Users(str(message.from_user.id)).get_code()
    data = await state.get_data()
    message_id = data.get("message_id")
    if user_code:
        await message.message.edit_text("–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–∞–ø–∏—à–∏ —Å–≤–æ–π email –æ—Ç –õ–ö–° –≤ –≤–∏–¥–µ login@edu.mirea.ru",
                                        reply_markup=cancel_keyboard.as_markup())
        data = await state.get_data()
        await state.set_state(InputMessage.enter_email)
        await state.update_data(data)
    else:
        await state.clear()
        await bot.delete_message(message_id=message_id, chat_id=message.from_user.id)
        await message.message.answer("–í—ã –Ω–µ —Å–æ–∑–¥–∞–ª–∏ –∫–æ–¥ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π —Å–≤–æ–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π!"
                                     " –î–æ–±–∞–≤—å—Ç–µ –µ–≥–æ –≤–ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ,"
                                     " —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Ä–∞–∑–¥–µ–ª–æ–º!", reply_markup=profile_keyboard)


@call_friends_router.message(F.text, InputMessage.enter_email)
async def enter_email(message: types.Message, state: FSMContext, bot: Bot):
    data = await state.get_data()
    message_id = data.get("message_id")
    if message.text == await Users(str(message.from_user.id)).get_email():
        await message.delete()
        await bot.edit_message_text(text="–û—Ç–ª–∏—á–Ω–æ, –Ω–∞–ø–∏—à–∏ —Å–≤–æ–π –ø–æ—Ä–æ–ª—å –æ—Ç –õ–ö–°",
                                    message_id=message_id,
                                    chat_id=message.from_user.id,
                                    reply_markup=cancel_keyboard.as_markup())
        await state.set_state(InputMessage.enter_password)
        await state.update_data(data)
    else:
        await message.delete()
        await bot.edit_message_text(text="–¢—ã –≤–≤–µ–ª –Ω–µ–≤–µ—Ä–Ω—ã–π email, –ø–æ–ø—Ä–æ–±—É–π –ø–æ–≤—Ç–æ—Ä–∏—Ç—å!",
                                    message_id=message_id,
                                    chat_id=message.from_user.id,
                                    reply_markup=cancel_keyboard.as_markup())


@call_friends_router.message(F.text, InputMessage.enter_password)
async def enter_password(message: types.Message, state: FSMContext, bot: Bot):
    data = await state.get_data()
    message_id = data.get("message_id")
    user_code = await Users(str(message.from_user.id)).get_password()
    if message.text == user_code and user_code is not None:
        await message.delete()
        await bot.edit_message_text(text="–û—Ç–ª–∏—á–Ω–æ, –Ω–∞–ø–∏—à–∏ —Å–≤–æ–π –Ω–æ–≤—ã–π –ø–∏–Ω-–∫–æ–¥ –ª—é–±–æ–π –¥–ª–∏–Ω—ã (–Ω–µ –º–µ–Ω–µ–µ 4 —Ü–∏—Ñ—Ä)!",
                                    message_id=message_id,
                                    chat_id=message.from_user.id,
                                    reply_markup=cancel_keyboard.as_markup())
        await state.set_state(InputMessage.enter_code)
        await state.update_data(data)
    elif user_code is None:
        await bot.delete_message(chat_id=message.from_user.id, message_id=message_id)
        await message.answer("–í—ã –Ω–µ —Å–æ–∑–¥–∞–ª–∏ –∫–æ–¥ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π —Å–≤–æ–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π!"
                                  " –î–æ–±–∞–≤—å—Ç–µ –µ–≥–æ –≤–ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ,"
                                  " —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Ä–∞–∑–¥–µ–ª–æ–º!", reply_markup=profile_keyboard)
    else:
        await message.delete()
        await bot.edit_message_text(text="–¢—ã –≤–≤–µ–ª –Ω–µ–≤–µ—Ä–Ω—ã–π –ø–æ—Ä–æ–ª—å, –ø–æ–ø—Ä–æ–±—É–π –ø–æ–≤—Ç–æ—Ä–∏—Ç—å!",
                                    message_id=message_id,
                                    chat_id=message.from_user.id,
                                    reply_markup=cancel_keyboard.as_markup())


@call_friends_router.message(F.text, InputMessage.enter_code)
async def enter_code(message: types.Message, state: FSMContext, bot: Bot):
    data = await state.get_data()
    message_id = data.get("message_id")
    if message.text.isdigit():
        await message.delete()
        await Users(str(message.from_user.id)).add_secret_code(int(message.text))
        await bot.edit_message_text(text="–û—Ç–ª–∏—á–Ω–æ —Ç–≤–æ–π –∫–æ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω! –í–≤–µ–¥–∏ –µ–≥–æ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞—è–≤–∫–∏",
                                    message_id=message_id,
                                    chat_id=message.from_user.id,
                                    reply_markup=cancel_keyboard.as_markup())
        data = await state.get_data()
        await state.set_state(InputMessage.code_confirm)
        await state.update_data(data)
        await message.delete()
    else:
        await bot.edit_message_text(text="–¢–≤–æ–π –∫–æ–¥ –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å —Ç–æ–ª—å–∫–æ –∏–∑ —Ü–∏—Ñ—Ä, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑!",
                                    message_id=message_id,
                                    chat_id=message.from_user.id,
                                    reply_markup=cancel_keyboard.as_markup())


@call_friends_router.message(F.text, InputMessage.code_confirm)
async def confirm_new_code(message: types.Message, state: FSMContext, bot: Bot):
    data = await state.get_data()
    message_id = data.get("message_id")
    user_code = await Users(str(message.from_user.id)).get_code()
    try:
        if message.text == str(await Users(str(message.from_user.id)).get_code()) and user_code:
            await message.delete()
            data = await state.get_data()
            users_api = Users(str(message.from_user.id))
            obchaga = await Users(message.from_user.id).get_number_of_obchaga()
            current_data = datetime.datetime.now()
            application = Guests(user_id=message.from_user.id)
            await application.add_application(friend_initials=data.get('initiels'),
                                              date=str(current_data.day) + "/"
                                                   + str(current_data.month) +
                                                   "/" + str(current_data.year),
                                              time=str(data.get('time'))
                                              )
            application_id = application.application_id
            confirm_friend_keyboard = InlineKeyboardBuilder()
            confirm_friend_keyboard.row(InlineKeyboardButton(text="–û–¥–æ–±—Ä–∏—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ",
                                                             callback_data=f"confirm_friend|{application_id}"))
            confirm_friend_keyboard.row(InlineKeyboardButton(text="–û—Ç–∫–ª–æ–Ω–∏—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ",
                                                             callback_data=f"not_confirm_friend|{application_id}"))
            admins = await Dormitory(obchaga=obchaga).get_obchaga_admins()
            text_message = f"–í–∞–º –ø—Ä–∏—à–ª–æ –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ! {await users_api.get_initials()} –∏–∑ –∫–æ–º–Ω–∞—Ç—ã"\
                           f" {await users_api.get_room()}"\
                           f" –ø—Ä–∏–≥–ª–∞—Å–∏–ª {data.get('initiels')}"\
                           f" –∫ —Å–µ–±–µ –≤ –≥–æ—Å—Ç–∏! –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è –ø—Ä–∏–±—ã—Ç–∏—è: {str(data.get('time'))[:-3]}"
            task_list = [asyncio.create_task(bot.send_message(chat_id=user,
                                                              text=text_message,
                                                              reply_markup=confirm_friend_keyboard.as_markup()))
                         for user in list(admins.keys())]
            await asyncio.gather(*task_list)
            text_for_user = (f"–û—Ç–ª–∏—á–Ω–æ, –≤–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∫–æ–º–µ–Ω–¥–∞–Ω—Ç—É –∏ –∂–¥–µ—Ç –æ–¥–æ–±—Ä–µ–Ω–∏—è! "
                             f"–í—ã –ø—Ä–∏–≥–ª–∞—Å–∏–ª–∏ {data.get('initiels')} –∫ —Å–µ–±–µ –≤ –≥–æ—Å—Ç–∏! "
                             f"–ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è –ø—Ä–∏–±—ã—Ç–∏—è: {str(data.get('time'))[:-3]}")
            await message.answer(text=text_for_user)
            await state.clear()
            await bot.delete_message(chat_id=message.from_user.id, message_id=message_id)
        elif user_code is None:
            await state.clear()
            await bot.delete_message(message_id=message_id, chat_id=message.from_user.id)
            await message.answer("–í—ã –Ω–µ —Å–æ–∑–¥–∞–ª–∏ –∫–æ–¥ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π —Å–≤–æ–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π!"
                                         " –î–æ–±–∞–≤—å—Ç–µ –µ–≥–æ –≤–ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ,"
                                         " —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Ä–∞–∑–¥–µ–ª–æ–º!", reply_markup=profile_keyboard)
        else:
            await bot.edit_message_text(text="–¢—ã –≤–≤–µ–ª –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∫–æ–¥, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑!",
                                        message_id=message_id,
                                        chat_id=message.from_user.id,
                                        reply_markup=cancel_keyboard.as_markup())
    except:
        await bot.delete_message(chat_id=message.from_user.id, message_id=message_id)
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–≤–æ—é –∑–∞—è–≤–∫—É. –£–±–µ–¥–∏—Å—å, —á—Ç–æ —Ç—ã –≤–≤–µ–ª –≤—Å–µ —Å–≤–æ–∏"
                             " –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–∂–∏–≤–∞–Ω–∏–∏ –≤ –æ–±—â–µ–∂–∏—Ç–∏–∏!",
                             reply_markup=profile_keyboard)


@call_friends_router.callback_query(Text(text="–û—Ç–º–µ–Ω–∞‚ùå"), any_state)
async def canceling(call: types.CallbackQuery, state: FSMContext):
    await call.message.delete()
    await state.clear()
    await call.message.answer("–í—ã–±–µ—Ä–∏ —Å–≤–æ–∏ –¥–∞–ª—å–Ω–µ–π—à–∏–µ –¥–µ–π—Å—Ç–≤–∏—è", reply_markup=profile_keyboard)


@end_router.message(any_state)
async def another(message: types.Message):
    await message.answer('üëã–Ø –≤–∞—Å –Ω–µ –ø–æ–Ω–∏–º–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–∏ –¥–∞–ª—å–Ω–µ–π—à–∏–µ –¥–µ–π—Å—Ç–≤–∏—è!',
                         reply_markup=start_keyboard)