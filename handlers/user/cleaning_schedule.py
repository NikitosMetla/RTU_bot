import asyncio

from aiogram import types, Router, Bot
from aiogram.filters import Text
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import any_state
from aiogram.types import InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder

from data.keyboards import profile_keyboard, check_in_cleaning, back_to_graphic
from data.settings import comendant_ids
from db.all_dormitories import Dormitory
from db.users import Users

cleaning_router = Router()


@cleaning_router.message(Text(text="–ì—Ä–∞—Ñ–∏–∫ —É–±–æ—Ä–∫–∏‚ÑπÔ∏è", ignore_case=True))
async def cleaning(message: types.Message, state: FSMContext):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–∏ –¥–∞–ª—å–Ω–µ–π—à–∏–µ –¥–µ–π—Å—Ç–≤–∏—è!", reply_markup=check_in_cleaning.as_markup())


@cleaning_router.callback_query(Text(contains="–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–π –≥—Ä–∞—Ñ–∏–∫üìÖ"), any_state)
async def view_graphic(call: types.CallbackQuery, state: FSMContext):
    await call.message.edit_text(f"<b>–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä —Å–≤–æ–µ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞:</b>\n"
                                 f"<i>–î–µ–Ω—å –Ω–µ–¥–µ–ª–∏:</i> –ß–µ—Ç–≤–µ—Ä–≥\n<i>–í—Ä–µ–º—è</i>: 14:00-16:00\n"
                                 f"<i>–ú–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è:</i> –û–±—â–µ–∂–∏—Ç–∏–µ ‚Ññ1, 2 —ç—Ç–∞–∂"
                                 f"\n<b><i>–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫,"
                                 f" –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∫–æ–º–µ–Ω–¥–∞–Ω—Ç—É —á–µ—Ä–µ–∑ –±–æ—Ç–∞ –∏–ª–∏ –æ—á–Ω–æ</i></b>",
                                 reply_markup=back_to_graphic.as_markup())


@cleaning_router.callback_query(Text(contains="–ù–∞—á–∞—Ç—å —É–±–æ—Ä–∫—É‚ñ∂Ô∏è"), any_state)
async def confirm_start_cleaning(call: types.CallbackQuery, state: FSMContext):
    confirm_start_cleaning_keyboard = InlineKeyboardBuilder()
    confirm_start_cleaning_keyboard.row(InlineKeyboardButton(text="–î–∞", callback_data="confirm_start"))
    confirm_start_cleaning_keyboard.row(InlineKeyboardButton(text="–ù–µ—Ç", callback_data="not_confirm_start"))
    await call.message.edit_text(text="–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –Ω–∞—á–∞—Ç—å —É–±–æ—Ä–∫—É?",
                                 reply_markup=confirm_start_cleaning_keyboard.as_markup())


@cleaning_router.callback_query(Text(contains="not_confirm_start"), any_state)
async def start_work(call: types.CallbackQuery, state: FSMContext):
    await call.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–∏ –¥–∞–ª—å–Ω–µ–π—à–∏–µ –¥–µ–π—Å—Ç–≤–∏—è!", reply_markup=check_in_cleaning.as_markup())


@cleaning_router.callback_query(Text(contains="confirm_start"), any_state)
async def start_work(call: types.CallbackQuery, bot: Bot):
    try:
        keyboard = InlineKeyboardBuilder()
        keyboard.row(InlineKeyboardButton(text="–ó–∞–≤–µ—Ä—à–∏—Ç—å —É–±–æ—Ä–∫—É‚òëÔ∏è", callback_data="end_cleaning"))
        users_api = Users(call.from_user.id)
        headman_id = await Dormitory(obchaga=await users_api.get_number_of_obchaga(),
                                     floor=await users_api.get_floor()).get_headman()
        if len(headman_id) > 0:
            headman_id = list(headman_id.keys())
            task_list = [asyncio.create_task(bot.send_message(chat_id=headman,
                                                              text=f"–ö–æ–º–Ω–∞—Ç–∞ {await users_api.get_room()}"
                                                                   f" –Ω–∞—á–∞–ª–∞ —É–±–æ—Ä–∫—É!")) for headman in headman_id]
            await asyncio.gather(*task_list)
            await call.message.edit_text(f"–í—ã –Ω–∞—á–∞–ª–∏ —É–±–æ—Ä–∫—É, —Å—Ç–∞—Ä–æ—Å—Ç–∞–º —ç—Ç–∞–∂–∞ –ø—Ä–∏—à–ª–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —ç—Ç–æ–º.\n"
                                         f"–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É, –∫–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ —É–±–∏—Ä–∞—Ç—å—Å—è!",
                                         reply_markup=keyboard.as_markup())
        else:
            await call.message.edit_text(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å—Ç–∞—Ä–æ—Å—Ç–∞–º —ç—Ç–∞–∂–∞, –≤—ã –ª–∏–±–æ –≤–≤–µ–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ"
                                         f" —Å–≤–æ–µ–º –º–µ—Å—Ç–µ –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è, –ª–∏–±–æ –Ω–∞ –¥–∞–Ω–Ω–æ–º —ç—Ç–∞–∂–µ –Ω–µ—Ç —Å—Ç–∞—Ä–æ—Å—Ç—ã",
                                         reply_markup=back_to_graphic.as_markup())
    except:
        await call.message.edit_text(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å—Ç–∞—Ä–æ—Å—Ç–∞–º —ç—Ç–∞–∂–∞, –≤—ã –≤–≤–µ–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ"
                                     f" —Å–≤–æ–µ–º –º–µ—Å—Ç–µ –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è –∏–ª–∏ –Ω–µ –≤–≤–µ–ª–∏ –∏—Ö –≤–æ–≤—Å–µ!",
                                     reply_markup=back_to_graphic.as_markup())


@cleaning_router.callback_query(Text(text="end_cleaning"), any_state)
async def ending_cleaning(call: types.CallbackQuery, state: FSMContext):
    confirm_cleaning_keyboard = InlineKeyboardBuilder()
    confirm_cleaning_keyboard.row(InlineKeyboardButton(text="–î–∞", callback_data="confirm_cleaning"))
    confirm_cleaning_keyboard.row(InlineKeyboardButton(text="–ù–µ—Ç", callback_data="not_confirm_cleaning"))
    await call.message.edit_text("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–∫–æ–Ω—á–∏—Ç—å —É–±–æ—Ä–∫—É?",
                                 reply_markup=confirm_cleaning_keyboard.as_markup())


@cleaning_router.callback_query(Text(text="confirm_cleaning"), any_state)
async def confirm_cleaning(call: types.CallbackQuery, state: FSMContext, bot: Bot):
    users_api = Users(call.from_user.id)
    headman_id = await Dormitory(obchaga=await users_api.get_number_of_obchaga(),
                                 floor=await users_api.get_floor()).get_headman()
    headman_id = list(headman_id.keys())
    try:
        for headman in headman_id:
            await bot.send_message(
                chat_id=headman,
                text=f"–ö–æ–º–Ω–∞—Ç–∞ {await users_api.get_room()} –∑–∞–≤–µ—Ä—à–∏–ª–∞ —É–±–æ—Ä–∫—É! –¢—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∏—Ç—å!")
        await call.message.edit_text(f"–û—Ç–ª–∏—á–Ω–æ, —Å—Ç–∞—Ä–æ—Å—Ç–∞–º —ç—Ç–∞–∂–∞ –ø—Ä–∏—à–ª–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —É–±–æ—Ä–∫–∏!"
                                     f" –í –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –æ–Ω –ø–æ–¥–æ–π–¥–µ—Ç –Ω–∞ –º–µ—Å—Ç–æ –∏ –ø—Ä–æ–≤–µ–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫—É",
                                     reply_markup=back_to_graphic.as_markup())
    except:
        await call.message.edit_text(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å—Ç–∞—Ä–æ—Å—Ç–µ —ç—Ç–∞–∂–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ,"
                                     f" –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ª–∏ –≤—ã –≤–≤–µ–ª–∏ –¥–∞–Ω–Ω—ã–µ –æ –≤–∞—à–µ–º –º–µ—Å—Ç–µ –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è",
                                     reply_markup=back_to_graphic.as_markup())


@cleaning_router.callback_query(Text(text="not_confirm_cleaning"), any_state)
async def confirm_cleaning(call: types.CallbackQuery, state: FSMContext, bot: Bot):
    await start_work(call, FSMContext, Bot)


@cleaning_router.callback_query(Text(text="graphic_cleaning"), any_state)
async def confirm_cleaning(call: types.CallbackQuery, state: FSMContext):
    await cleaning(call.message, FSMContext)
    await call.message.delete()
